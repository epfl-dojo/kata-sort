# # Shuffled numbers from 1 to 500
# data_random = [421, 22, 305, 70, 385, 259, 200, 256, 123, 374, 409, 495, 335, 156, 304, 197, 394, 471, 2, 212, 349, 397, 478, 115, 220, 201, 320, 62, 327, 487, 98, 130, 321, 12, 93, 133, 303, 209, 29, 114, 39, 347, 239, 186, 460, 218, 412, 51, 490, 74, 157, 193, 100, 33, 196, 286, 182, 210, 433, 481, 52, 137, 254, 85, 441, 270, 497, 343, 359, 111, 275, 187, 482, 78, 494, 131, 361, 208, 468, 46, 234, 262, 215, 27, 477, 391, 342, 280, 461, 45, 318, 179, 456, 66, 219, 351, 57, 1, 129, 38, 338, 190, 228, 20, 155, 312, 64, 126, 331, 447, 124, 367, 83, 370, 226, 152, 171, 252, 144, 353, 480, 246, 79, 428, 454, 437, 198, 231, 92, 166, 69, 279, 393, 366, 119, 296, 167, 6, 80, 472, 324, 191, 322, 400, 61, 411, 163, 260, 109, 30, 90, 31, 445, 194, 122, 116, 65, 496, 214, 75, 269, 244, 476, 95, 273, 251, 430, 291, 195, 488, 112, 264, 375, 424, 44, 103, 125, 422, 299, 40, 413, 449, 3, 25, 101, 211, 373, 192, 7, 332, 448, 237, 14, 128, 86, 21, 257, 475, 499, 278, 470, 10, 28, 175, 493, 362, 135, 395, 354, 384, 216, 365, 276, 243, 120, 389, 417, 325, 96, 410, 183, 47, 364, 363, 404, 240, 221, 18, 230, 258, 356, 358, 396, 455, 232, 469, 73, 154, 176, 54, 387, 204, 427, 474, 311, 457, 143, 435, 376, 99, 19, 329, 177, 371, 292, 484, 271, 432, 37, 159, 105, 420, 168, 392, 32, 227, 483, 48, 76, 379, 145, 107, 492, 63, 419, 136, 55, 203, 406, 23, 346, 236, 336, 314, 450, 134, 165, 17, 199, 217, 408, 185, 250, 463, 72, 67, 132, 174, 316, 287, 141, 429, 104, 241, 337, 319, 369, 442, 293, 425, 224, 82, 282, 323, 443, 383, 333, 294, 148, 146, 189, 334, 147, 142, 357, 464, 308, 290, 138, 407, 398, 423, 352, 77, 42, 9, 372, 399, 8, 170, 390, 50, 184, 414, 462, 453, 446, 326, 91, 113, 473, 295, 140, 41, 238, 43, 188, 466, 440, 108, 150, 451, 89, 313, 4, 310, 486, 164, 459, 436, 401, 178, 253, 242, 121, 444, 161, 68, 416, 360, 35, 160, 15, 300, 222, 255, 206, 368, 117, 97, 306, 5, 151, 277, 381, 118, 458, 380, 317, 102, 58, 180, 479, 261, 172, 233, 263, 315, 283, 302, 307, 485, 415, 465, 169, 426, 339, 225, 60, 84, 350, 500, 59, 213, 249, 355, 245, 330, 267, 378, 26, 162, 298, 489, 265, 87, 377, 297, 402, 348, 467, 24, 71, 139, 309, 340, 328, 207, 274, 13, 94, 434, 81, 53, 284, 345, 149, 439, 229, 268, 382, 281, 36, 403, 438, 247, 266, 173, 285, 431, 341, 158, 181, 34, 11, 56, 386, 452, 344, 205, 498, 49, 223, 388, 491, 288, 235, 127, 110, 289, 153, 301, 106, 88, 16, 405, 202, 272, 248, 418]

# # Roughly sorted numbers from 1 to 500
# data_nearly_sorted = [4, 1, 5, 2, 6, 7, 10, 9, 3, 8, 14, 17, 18, 19, 13, 15, 16, 11, 12, 20, 24, 26, 27, 21, 23, 29, 30, 22, 28, 25, 38, 40, 33, 39, 35, 36, 31, 34, 37, 32, 49, 47, 43, 42, 48, 50, 41, 46, 44, 45, 52, 51, 58, 59, 56, 53, 54, 60, 55, 57, 65, 63, 61, 62, 67, 66, 64, 70, 69, 68, 75, 79, 73, 80, 77, 71, 74, 72, 78, 76, 89, 82, 87, 84, 90, 86, 81, 83, 85, 88, 97, 94, 98, 91, 92, 99, 95, 100, 96, 93, 105, 102, 104, 110, 107, 101, 108, 106, 103, 109, 120, 117, 113, 115, 112, 116, 114, 118, 111, 119, 128, 123, 127, 121, 130, 122, 124, 126, 125, 129, 137, 133, 138, 134, 135, 136, 131, 132, 139, 140, 144, 149, 145, 150, 148, 142, 143, 141, 146, 147, 153, 157, 155, 151, 158, 156, 152, 159, 160, 154, 168, 162, 161, 163, 164, 165, 170, 166, 169, 167, 178, 174, 177, 175, 173, 176, 180, 172, 171, 179, 182, 187, 190, 181, 184, 186, 189, 185, 183, 188, 191, 199, 195, 192, 200, 198, 197, 193, 194, 196, 206, 210, 209, 208, 203, 202, 204, 205, 207, 201, 214, 212, 219, 215, 220, 213, 217, 211, 216, 218, 228, 225, 221, 223, 224, 227, 226, 222, 229, 230, 234, 240, 235, 239, 236, 233, 231, 237, 232, 238, 246, 243, 247, 249, 244, 250, 245, 248, 242, 241, 257, 259, 253, 260, 256, 258, 255, 252, 251, 254, 267, 263, 270, 266, 262, 265, 268, 264, 269, 261, 275, 273, 274, 271, 278, 280, 276, 272, 277, 279, 281, 285, 282, 288, 290, 286, 284, 289, 283, 287, 300, 291, 292, 299, 293, 294, 297, 296, 298, 295, 302, 307, 303, 309, 304, 301, 308, 306, 305, 310, 314, 313, 317, 320, 311, 312, 315, 316, 319, 318, 326, 322, 324, 321, 328, 327, 330, 329, 323, 325, 332, 335, 340, 338, 333, 337, 336, 331, 339, 334, 349, 347, 343, 342, 345, 346, 350, 341, 348, 344, 352, 360, 357, 359, 358, 353, 356, 354, 351, 355, 367, 361, 365, 363, 368, 364, 362, 366, 370, 369, 378, 375, 379, 380, 377, 371, 373, 374, 376, 372, 381, 390, 386, 384, 389, 383, 387, 385, 388, 382, 397, 398, 394, 399, 393, 396, 395, 400, 391, 392, 408, 407, 401, 409, 405, 410, 402, 404, 403, 406, 411, 416, 420, 413, 419, 415, 412, 414, 417, 418, 425, 427, 426, 423, 424, 421, 428, 430, 422, 429, 431, 432, 434, 436, 438, 439, 433, 437, 435, 440, 450, 449, 445, 443, 444, 447, 442, 448, 441, 446, 454, 456, 451, 457, 452, 459, 458, 460, 453, 455, 470, 463, 465, 466, 461, 468, 469, 462, 464, 467, 476, 479, 471, 473, 472, 478, 477, 475, 480, 474, 485, 481, 489, 483, 490, 484, 482, 487, 488, 486, 493, 492, 500, 494, 498, 496, 495, 491, 497, 499]

# # Reversed numbers from 500 to 1
# data_reversed = [500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

# # 5 times shuffled numbers from 199 to 100
# data_few_unique = [158, 138, 159, 194, 163, 183, 126, 147, 189, 175, 157, 112, 119, 129, 139, 193, 185, 109, 161, 177, 199, 114, 108, 116, 181, 154, 160, 101, 118, 167, 102, 152, 148, 134, 186, 174, 141, 179, 171, 125, 128, 150, 135, 143, 178, 120, 142, 196, 131, 104, 127, 180, 106, 156, 169, 184, 107, 149, 124, 103, 121, 191, 170, 140, 133, 176, 164, 117, 168, 130, 122, 155, 165, 195, 137, 188, 145, 110, 198, 197, 166, 132, 192, 115, 190, 172, 100, 113, 162, 136, 105, 173, 146, 153, 111, 144, 187, 123, 151, 182, 123, 170, 116, 177, 129, 173, 122, 185, 139, 164, 172, 118, 121, 175, 163, 155, 184, 194, 157, 153, 138, 176, 102, 105, 109, 174, 178, 100, 167, 110, 112, 149, 111, 171, 115, 125, 145, 148, 162, 150, 165, 142, 188, 126, 119, 190, 133, 187, 196, 179, 136, 128, 192, 189, 114, 156, 183, 104, 135, 137, 146, 181, 127, 141, 199, 140, 132, 144, 143, 131, 113, 169, 197, 186, 158, 168, 182, 180, 154, 101, 117, 103, 160, 134, 120, 107, 130, 152, 108, 166, 193, 147, 198, 191, 151, 159, 195, 124, 161, 106, 131, 140, 120, 177, 185, 191, 175, 111, 129, 163, 153, 160, 156, 107, 182, 101, 136, 173, 176, 112, 141, 199, 126, 128, 138, 162, 110, 179, 103, 104, 168, 150, 151, 147, 158, 123, 152, 184, 178, 105, 130, 193, 109, 172, 155, 196, 116, 171, 118, 134, 127, 192, 113, 115, 164, 188, 174, 189, 166, 132, 145, 143, 114, 170, 186, 148, 161, 165, 157, 100, 159, 198, 197, 122, 187, 169, 133, 108, 124, 180, 183, 135, 125, 142, 119, 154, 149, 121, 195, 117, 194, 139, 190, 144, 181, 137, 102, 106, 167, 146, 172, 196, 141, 198, 162, 134, 110, 125, 161, 154, 138, 114, 155, 143, 184, 123, 190, 144, 109, 106, 158, 177, 150, 127, 169, 148, 186, 191, 116, 167, 102, 180, 137, 179, 146, 104, 108, 145, 133, 147, 176, 139, 151, 194, 197, 181, 185, 183, 192, 101, 152, 124, 129, 156, 195, 187, 140, 105, 119, 188, 149, 173, 178, 170, 160, 174, 132, 175, 189, 120, 164, 126, 171, 122, 115, 131, 130, 153, 166, 118, 100, 163, 112, 107, 168, 193, 117, 142, 111, 128, 165, 182, 121, 136, 157, 135, 103, 199, 159, 113, 183, 182, 190, 191, 173, 100, 178, 147, 103, 163, 110, 161, 128, 170, 198, 124, 123, 168, 116, 150, 165, 135, 197, 130, 118, 156, 119, 131, 129, 140, 115, 195, 141, 142, 186, 152, 126, 193, 177, 144, 109, 154, 167, 158, 192, 180, 107, 166, 176, 185, 143, 148, 136, 184, 122, 146, 145, 113, 157, 104, 194, 133, 138, 114, 155, 189, 108, 117, 171, 175, 127, 174, 106, 111, 112, 151, 169, 132, 196, 153, 159, 134, 164, 172, 125, 179, 181, 149, 120, 137, 102, 101, 160, 188, 162, 105, 139, 121, 199, 187]

# time the execution of a block of code
def time_this(title=nil)
  beg_time = Time.now
  yield
  dt = Time.now - beg_time
  puts "#{title}: #{dt}" unless title.nil?
  dt
end

# return an array of the integers between 1+ofs and n+ofs
def data_sorted(n, ofs=0)
  ((1+ofs)..(n+ofs)).to_a
end

# return an array of the integers between 1+ofs and n+ofs in reverse order
def data_reverse(n, ofs=0)
  ((1+ofs)..(n+ofs)).to_a.reverse
end

# return an array of the integers between 1+ofs and n+ofs in random order
def data_random(n, ofs=0)
  ((1+ofs)..(n+ofs)).to_a.shuffle
end

# return an array of size n where blocks of size bs are independently shuffled
def data_nearly_sorted(n, bs, ofs=0)
  a = []
  for i in 0..n/bs-1
    m = [bs, n-a.size].min
    a += data_random(m, i*bs+ofs)
  end
  a
end

# --------------------------------------------------------- bubble sort
def bubble_sort(a)
  for i in (a.size-1).downto(1)
    sorted = true
    for j in 0..(i-1)
      if a[j+1] < a[j]
        a[j+1],a[j] = a[j],a[j+1]
        sorted = false
      end
    end
    if sorted
      break
    end
  end
  a
end


# --------------------------------------------------------- quick sort
def partition(a, first, last, pivot)
  a[pivot],a[last] = a[last],a[pivot]
  j = first
  for i in first.upto(last-1)
    if a[i] <= a[last]
      a[i], a[j] = a[j], a[i]
      j = j + 1
    end
  end
  a[last], a[j] = a[j], a[last]
  j
end

def quick_sort(a, first=0, last=nil)
  last = a.size - 1 if last.nil?
  if first < last
    pivot = last
    pivot = partition(a, first, last, pivot)
    quick_sort(a, first, pivot-1)
    quick_sort(a, pivot+1, last)
  end
  a
end

# ---------------------------------------------------------------------------------
for algo in ["bubble", "quick"]
  for n in [100, 1000, 10000]
    a = data_random(n) 
    b = data_reverse(n)
    c = data_nearly_sorted(n, 100)
    time_this("#{algo} sort #{n}") do
      self.send("#{algo}_sort", a)
      self.send("#{algo}_sort", b)
      self.send("#{algo}_sort", c)
    end
  end
end